@page "/expenses/edit"
@using Microsoft.EntityFrameworkCore
@using InvoiceApp.Models
@using InvoiceApp.Data
@using InvoiceApp.ViewModels
@inject IDbContextFactory<InvoiceApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Expense</h2>
<hr />
@if (Expense is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Expense" OnValidSubmit="UpdateExpense" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Expense.Id" value="@Expense.Id" />
                <div class="mb-3">
                    <label for="totalamount" class="form-label">TotalAmount:</label>
                    <InputNumber id="totalamount" @bind-Value="Expense.TotalAmount" class="form-control" />
                    <ValidationMessage For="() => Expense.TotalAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalhst" class="form-label">TotalHst:</label>
                    <InputNumber id="totalhst" @bind-Value="Expense.TotalHst" class="form-control" />
                    <ValidationMessage For="() => Expense.TotalHst" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<button class="btn btn-success" @onclick="AddApproval">Add Approval</button>
<InputText id="employeeSearch" @bind-Value="employeeSearchTerm" @oninput="FilterEmployees" class="form-control" />

<InputSelect id="employeeSelect" @bind-Value="selectedEmployeeId" class="form-control">
    <option value="">-- Select an Employee --</option>
    @foreach (var employee in filteredEmployees)    {
        <option value="@employee.Id">@employee.FullName</option>
    }
</InputSelect>
<!-- Button to trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addNoteModal">
    Add Note
</button>

<!-- Modal -->
<div class="modal fade" id="addNoteModal" tabindex="-1" aria-labelledby="addNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteModalLabel">Add Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="newNote" OnValidSubmit="AddNote">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="mb-3">
                        <label for="noteText" class="form-label">Note:</label>
                        <InputTextArea id="noteText" @bind-Value="newNote.NoteText" class="form-control" />
                        <ValidationMessage For="() => newNote.NoteText" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div>

    <!-- File Upload -->
    <div class="mb-3">
        <label for="fileUpload" class="form-label">Upload Attachment:</label>
        <InputFile id="fileUpload" OnChange="HandleFileSelected" />
    </div>

    <a href="/expenses">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    private Note newNote = new Note();

    private Employee? _employee { get; set; }
    private ExpenseViewModel _expenseViewModel;
    private ApplicationDbContext context;

    [SupplyParameterFromForm]
    private Expense? Expense { get; set; }


    private string employeeSearchTerm = string.Empty;
    private int selectedEmployeeId;
    private List<Employee> employees = new List<Employee>();
    private List<Employee> filteredEmployees = new List<Employee>();


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Expense ??= await context.Expenses.FirstOrDefaultAsync(m => m.Id == Id);

        if (Expense is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        _employee = await context.Employees.FirstOrDefaultAsync(e => e.Id == 2);
        if (_employee != null)
        {
            Expense.SubmittedBy = _employee;
        }

        employees = await context.Employees.ToListAsync();
        filteredEmployees = employees;
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateExpense()
    {
        // using var context = DbFactory.CreateDbContext();
        context.Attach(Expense!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ExpenseExists(Expense!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/expenses");
    }

    private bool ExpenseExists(int id)
    {
        // using var context = DbFactory.CreateDbContext();
        return context.Expenses.Any(e => e.Id == id);
    }

    private async Task AddNote()
    {
        int expenseId = Expense.Id; 

        newNote.WrittenBy = _employee;
        newNote.DateAdded = DateTime.Now;
        newNote.ExpenseId = expenseId;


        Console.WriteLine($"{newNote.NoteText}, {newNote.WrittenBy}");
        context.Notes.Add(newNote);
        await context.SaveChangesAsync();
        newNote = new Note(); // Reset the note
    }

    private async Task AddApproval()
    {
        Employee approver = await context.Employees.FirstOrDefaultAsync(e => e.Id == selectedEmployeeId);

        var approval = new Approval { 
                Approver = _employee,
                LastUpdated = DateTime.Now,
                IsApproved = false,
                ExpenseId = Expense.Id
        };

        context.Approvals.Add(approval);
        await context.SaveChangesAsync();
    }

    private void FilterEmployees(ChangeEventArgs e)
    {
        employeeSearchTerm = e.Value.ToString();
        filteredEmployees = employees
            .Where(emp => emp.FullName.Contains(employeeSearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var uploadsFolder = Path.Combine(WebHostEnvironment.ContentRootPath, "SecureUploads");
        Directory.CreateDirectory(uploadsFolder);
        var filePath = Path.Combine(uploadsFolder, file.Name);

        await using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fileStream);
    }
}
