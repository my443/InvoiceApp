@using InvoiceApp.Models
@using InvoiceApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<InvoiceApp.Data.ApplicationDbContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment

<div class="modal fade" id="addExpenseModal" tabindex="-1" aria-labelledby="addExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addExpenseModalLabel">Quick-Add An Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="NewExpense" OnValidSubmit="AddNewExpense">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="row">
                        <div class="mb-3">
                            <label for="totalhst" class="form-label">Vendor:</label>
                            <InputText id="totalhst" @bind-Value="NewExpense.Vendor" class="form-control" />
                            <ValidationMessage For="() => NewExpense.Vendor" class="text-danger" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-1 col-md-6">
                            <label for="totalamount" class="form-label">Total Amount:</label>
                            <InputNumber id="totalamount" @bind-Value="NewExpense.TotalAmount" class="form-control" />
                            <ValidationMessage For="() => NewExpense.TotalAmount" class="text-danger" />
                        </div>
                        <div class="mb-1 col-md-6">
                            <label for="totalhst" class="form-label">Total HST:</label>
                            <InputNumber id="totalhst" @bind-Value="NewExpense.TotalHst" class="form-control" />
                            <ValidationMessage For="() => NewExpense.TotalHst" class="text-danger" />
                        </div>
                    </div>
                    <label for="fileInput" style="width: 100%; height: 100%; display: block; cursor: pointer">
                        <div class="mb-3 btn btn-primary w-100 " style="height:50px;background-color:orange;color:black;">
                            <InputFile id="fileInput" class="btn btn-primary" OnChange="HandleFileSelected" @ref="inputFileElement" style="display: none;" />
                            <span style="display: block; width: 100%; height: 100%;margin-top:10px">Tap here to select a file</span>
                        </div>
                    </label>
                    @if (BrowserFile != null)
                    {
                        <div>
                            <b>Selected File: </b>@BrowserFile.Name<br />
                        </div>
                    }
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Cancel</button>
                    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
            @*         <InputTextArea id="noteText" @bind-Value="newNote.NoteText" class="form-control" rows="7" /> *@
            @*         <ValidationMessage For="() => newNote.NoteText" class="text-danger" /> *@
            <div class="modal-footer">
                <p>For more complex expenses, choose <u>Submit and Edit</u>. In the Expense Details you can add multiple approvers, split the expense between multiple accounts, and more.</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool uploadSuccess = false;
    private bool uploadError = false;
    private InputFile inputFileElement;
    IBrowserFile BrowserFile;



    private void CloseModal()
    {
        OnClose.InvokeAsync();
    }

    private ApplicationDbContext context = default!;
    private Expense NewExpense = new Expense();


    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        GenerateNewExpense();
    }

    private async Task AddNewExpense()
    {
        context.Expenses.Add(NewExpense);
        await context.SaveChangesAsync();
        int newExpenseId = NewExpense.Id;

        if (BrowserFile != null)
        {
            await UploadFileAsync(BrowserFile);
        }
        GenerateNewExpense();
        CloseModal();
    }

    private void GenerateNewExpense()
    {
        NewExpense = new Expense();
        NewExpense.IsDeleted = false;
        ExpenseStatus status = context.ExpenseStatus.Where(e => e.Id == 2).FirstOrDefault();
        Employee employee = context.Employees.Where(e => e.Id == 2).FirstOrDefault();           // TODO - Must remove this hardcoded value
        NewExpense.IsDeleted = false;
        NewExpense.ExpenseStatus = status;
        NewExpense.SubmittedBy = employee;
        NewExpense.Vendor = "<<No Vendor Added>>";
    }

    private void GenerateNewBrowserFile()
    {
        BrowserFile = null;
    }

    private void Cancel()
    {
        GenerateNewExpense();
        GenerateNewBrowserFile();
    }

    // File Upload Section
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        BrowserFile = e.File;
    }

    private int SaveFilenameRecordToDatabase(IBrowserFile file)
    {
        // Get the file extension
        string fileExtension = Path.GetExtension(file.Name);
        FileType fileType = GetFileType(fileExtension);

        // Save the image record to the database
        var image = new Image
            {
                FileName = file.Name,
                UploadTime = DateTime.Now,
                UploadedBy = NewExpense.SubmittedBy,
                ExpenseId = NewExpense.Id,
                FileType = fileType,
            };

        context.Images.Add(image);
        context.SaveChanges();   // Save the filename to the database
                                 // RefreshAttachmentsList();
        return image.Id;
    }

    // Returns FileType or default to 'Other'
    private FileType GetFileType(string fileExtension)
    {
        FileType fileType = context.FileTypes.FirstOrDefault(ft => ft.Extension == fileExtension);

        if (fileType is null)
        {
            fileType = context.FileTypes.FirstOrDefault(ft => ft.Id == -1); // Default to 'Other'
        }

        return fileType;
    }

    private async Task UploadFileAsync(IBrowserFile file)
    {
        int imageDbID = SaveFilenameRecordToDatabase(file);
        string filename = $"{imageDbID.ToString()}-{file.Name}";

        var uploadsFolder = Path.Combine(WebHostEnvironment.ContentRootPath, "SecureUploads");
        Directory.CreateDirectory(uploadsFolder);
        var filePath = Path.Combine(uploadsFolder, filename);

        await using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fileStream);
    }



}
