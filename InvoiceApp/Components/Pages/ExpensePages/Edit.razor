@page "/expenses/edit"
@using Microsoft.EntityFrameworkCore
@using InvoiceApp.Models
@using InvoiceApp.Data
@using InvoiceApp.ViewModels
@using Microsoft.AspNetCore.Components.QuickGrid
@using InvoiceApp.Components.Icons
@inject IDbContextFactory<InvoiceApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h2>Expense Details</h2>
<hr />

<div class="row">
    <div class="text-end">
        <!-- Button to trigger modal -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addNoteModal">
            <AddIcon /> Add Note
        </button>
        <button type="button" class="btn btn-primary" @onclick="SaveAndRefreshPage">Save Details</button>
        <button type="button" class="btn btn-primary" @onclick="SaveAndReturnToList">Save And Return To List</button>

        <button @onclick='() => _expenseViewModel.ToggleSection("AllSections")' class="btn btn-primary">@(_expenseViewModel.sectionVisibility["AllSections"] ? "Show All Sections" : "Hide All Sections")</button>
        <p>@_expenseViewModel.sectionVisibility["AllSections"]</p>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div style="background-color: rgb(5, 39, 103); color:white;border-radius: 8px;padding: 5px;padding-left: 15px;">
            <h3>
                Expense Summary
            </h3>
        </div>
    </div>
</div>

@if (Expense is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm method="post" Model="Expense" OnValidSubmit="UpdateExpense" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary role="alert" />
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="totalhst" class="form-label">Vendor Name</label>
                        <InputText id="vendor" @bind-Value="Expense.Vendor" class="form-control" />
                        <ValidationMessage For="() => Expense.Vendor" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-4">
                    <input type="hidden" name="Expense.Id" value="@Expense.Id" />
                    <div class="mb-3">
                        <label for="totalamount" class="form-label">Total Amount</label>
                        <InputNumber id="totalamount" @bind-Value="Expense.TotalAmount" class="form-control" />
                        <ValidationMessage For="() => Expense.TotalAmount" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="totalhst" class="form-label">Total Hst</label>
                        <InputNumber id="totalhst" @bind-Value="Expense.TotalHst" class="form-control" />
                        <ValidationMessage For="() => Expense.TotalHst" class="text-danger" />
                    </div>
                </div>
            </div>
            @* <button type="submit" class="btn btn-primary">Save</button> *@
        </EditForm>
    </div>
}
<div class="row">
    <div class="col-12">
        <div style="background-color: rgb(5, 39, 103); color:white;border-radius: 8px;padding: 5px;padding-left: 15px;">
            <a @onclick='() => _expenseViewModel.ToggleSection("ExpenseDetails")' style="cursor: pointer;">
                <h3>
                    @(_expenseViewModel.SectionToggleIcon("ExpenseDetails"))
                    Expense Details
                </h3>
            </a>
        </div>
    </div>
</div>

@if (_expenseViewModel.sectionVisibility["ExpenseDetails"])
{
    <QuickGrid Class="table" Items="context.ExpenseDetails.Where(expensedetails => expensedetails.ExpenseId == Expense.Id).Include(ed => ed.Department).Include(ed => ed.Account)">
        <TemplateColumn Title="Department" Context="expensedetail">
            <InputSelect @bind-Value="expensedetail.DepartmentId" class="form-select" @onchange="() => OnDepartmentChanged(expensedetail)">
                @foreach (var department in _departments)
                {
                    <option value="@department.Id">@department.Name</option>
                }
            </InputSelect>
        </TemplateColumn>
        <PropertyColumn Property="expensedetail => expensedetail.Department.Name" />
        <PropertyColumn Property="expensedetail => expensedetail.Account.Name" />
        <PropertyColumn Property="expensedetail => expensedetail.Amount" />
        <PropertyColumn Property="expensedetail => expensedetail.Hst" />
        @* <PropertyColumn Property="expensedetail => expensedetail.ExpenseId" /> *@

        <TemplateColumn Context="expensedetail">
            <button class="btn btn-primary" @onclick="() => OnDepartmentChanged(expensedetail)">Save Change</button>
            <a href="@($"expensedetails/edit?id={expensedetail.Id}")">Edit</a> |
            @* <a href="@($"expensedetails/details?id={expensedetail.Id}")">Details</a> | *@
            <a href="@($"expensedetails/delete?id={expensedetail.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>

    
}
<hr />

<div class="row">
    <div class="col-12">
        <div style="background-color: rgb(5, 39, 103); color:white;border-radius: 8px;padding: 5px;padding-left: 15px;">
            <a @onclick='() => _expenseViewModel.ToggleSection("Approvals")' style="cursor: pointer;">
                <h3>
                    @(_expenseViewModel.SectionToggleIcon("Approvals"))
                    Approvals
                </h3>
            </a>
        </div>
    </div>
</div>

@if (_expenseViewModel.sectionVisibility["Approvals"])
{
    <button class="btn btn-success" @onclick="AddApproval">Add Approval</button>
    <InputText id="employeeSearch" @bind-Value="employeeSearchTerm" @oninput="FilterEmployees" class="form-control" />

    <InputSelect id="employeeSelect" @bind-Value="selectedEmployeeId" class="form-control">
        <option value="">-- Select an Employee --</option>
        @foreach (var employee in filteredEmployees)
        {
            <option value="@employee.Id">@employee.FullName</option>
        }
    </InputSelect>

    <QuickGrid Class="table" Items="context.Approvals.Where(a => a.ExpenseId == Expense.Id)">
        <PropertyColumn Property="approval => approval.Approver.FullName" />
        <PropertyColumn Property="approval => approval.LastUpdated" />
        <PropertyColumn Property="approval => approval.IsApproved" />

        <TemplateColumn Context="approval">
            @* <a href="@($"approvals/edit?id={approval.Id}")">Edit</a> | *@
            @* <a href="@($"approvals/details?id={approval.Id}")">Details</a> | *@
            @* <a href="@($"approvals/delete?id={approval.Id}")">Delete</a> *@
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteApprovalModal" @onclick='() => DeleteApprover(approval.Id)'>
                Delete Approver
            </button>
        </TemplateColumn>
    </QuickGrid>
}
<hr />

<div class="row">
    <div class="col-12">
        <div style="background-color: rgb(5, 39, 103); color:white;border-radius: 8px;padding: 5px;padding-left: 15px;">
            <a @onclick='() => _expenseViewModel.ToggleSection("Notes")' style="cursor: pointer;">
                <h3>
                    @(_expenseViewModel.SectionToggleIcon("Notes"))
                    Notes
                </h3>
            </a>
        </div>
    </div>
</div>

@if (_expenseViewModel.sectionVisibility["Notes"])
{
    <QuickGrid Class="table" Items="context.Notes.Where(n => n.ExpenseId == Expense.Id)">
        <TemplateColumn Title="Note Text" Class="w-50">
            <div style="width: 100%;">
                @((MarkupString)context.NoteText)
            </div>
        </TemplateColumn>
        <PropertyColumn Property="note => note.WrittenBy.FullName" />
        <PropertyColumn Property="note => note.WrittenBy.EmailAddress" />
        <PropertyColumn Property="note => note.DateAdded" />
        <PropertyColumn Property="note => note.ExpenseId" />

        @* <TemplateColumn Context="note"> *@
        @*     <a href="@($"notes/edit?id={note.Id}")">Edit</a> | *@
        @*     <a href="@($"notes/details?id={note.Id}")">Details</a> | *@
        @*     <a href="@($"notes/delete?id={note.Id}")">Delete</a> *@
        @* </TemplateColumn> *@
    </QuickGrid>
}
<hr />
<div class="row">
    <div class="col-12">
        <div style="background-color: rgb(5, 39, 103); color:white;border-radius: 8px;padding: 5px;padding-left: 15px;">
            <a @onclick='() => _expenseViewModel.ToggleSection("Images")' style="cursor: pointer;">
                <h3>
                    @(_expenseViewModel.SectionToggleIcon("Images"))
                    Attachments
                </h3>
            </a>
        </div>
    </div>
</div>

@if (_expenseViewModel.sectionVisibility["Images"])
{
    <!-- File Upload -->
    <div class="mb-3">
        <label for="fileUpload" class="form-label">Upload Attachment:</label>
        <InputFile id="fileUpload" OnChange="HandleFileSelected" />
    </div>

    @if (_images.Any())
    {
        <h3>Attached Images</h3>
        <div class="row">
            @foreach (var image in _images)
            {
                <div class="col-md-3 mb-3">
                    <div class="card">
                        <button class="btn btn-link" @onclick="() => DownloadFile(image.Id)">
                            @image.FileName
                            @* <img src="" class="card-img-top" alt="@image.FileName" /> *@
                        </button>
                        <div class="card-body">
                            <p class="card-text">@image.FileName</p>
                            <p style="text-align:end">
                                <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteAttachmentModal" @onclick='() => DeleteAttachment(image.Id)'>
                                    Delete Attachment
                                </button>
                            </p>
                        </div>

                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No images attached to this expense.</p>
    }
}
<hr />



<a href="/expenses">Back to List</a>


<!-- Button to trigger modal -->
@* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addNoteModal"> *@
@*     Add Note *@
@* </button> *@


<div class="modal fade" id="addNoteModal" tabindex="-1" aria-labelledby="addNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteModalLabel">Add Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="newNote" OnValidSubmit="AddNote">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="mb-3">
                        <label for="noteText" class="form-label">Note:</label>
                        <InputTextArea id="noteText" @bind-Value="newNote.NoteText" class="form-control" rows="7" />
                        <ValidationMessage For="() => newNote.NoteText" class="text-danger" />
                    </div>
                    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>



<!-- Delete Approver -->
<div class="modal " id="deleteApprovalModal" tabindex="-1" aria-labelledby="deleteApprovalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteApprovalModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this approver?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteApproval">Yes</button>
            </div>
        </div>
    </div>
</div>


<!-- Delete Attachment -->
<div class="modal " id="deleteAttachmentModal" tabindex="-1" aria-labelledby="deleteAttachmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAttachmentModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this attachment?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteAttachment">Yes</button>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    private Note newNote = new Note();

    private Employee? _employee { get; set; }
    private ExpenseViewModel _expenseViewModel;
    private ApplicationDbContext context;

    [SupplyParameterFromForm]
    private Expense? Expense { get; set; }


    private string employeeSearchTerm = string.Empty;
    private int selectedEmployeeId;
    private List<Employee> employees = new List<Employee>();
    private List<Employee> filteredEmployees = new List<Employee>();

    private List<Approval> _approvals = new List<Approval>();
    private List<Image> _images = new List<Image>();

    private EditForm editForm;

    private int selectedApprovalForDeletion;
    private int selectedAttachmentForDeletion;

    private List<Department> _departments;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        _expenseViewModel = new ExpenseViewModel(context);

        Expense ??= await context.Expenses.FirstOrDefaultAsync(m => m.Id == Id);
        _expenseViewModel.EnsureExpenseDetailsSum(Expense);
        _expenseViewModel.GetExpenseDetails(Expense.Id);

        if (Expense is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        _employee = await context.Employees.FirstOrDefaultAsync(e => e.Id == 2);
        if (_employee != null)
        {
            Expense.SubmittedBy = _employee;
        }

        employees = await context.Employees.ToListAsync();
        filteredEmployees = employees;

        RefreshAttachmentsList();

        _approvals = await context.Approvals.Where(approval => approval.ExpenseId == Expense.Id).ToListAsync();
        _departments = await context.Departments.ToListAsync();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateExpense()
    {
        // using var context = DbFactory.CreateDbContext();
        context.Attach(Expense!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ExpenseExists(Expense!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        // RefreshPage();
        // NavigationManager.NavigateTo("/expenses");
    }

    private bool ExpenseExists(int id)
    {
        // using var context = DbFactory.CreateDbContext();
        return context.Expenses.Any(e => e.Id == id);
    }

    private async Task AddNote()
    {
        int expenseId = Expense.Id;

        if (newNote.NoteText is null)
        {
            return;
        }

        newNote.NoteText = newNote.NoteText.Replace("\n", "<br/>").Replace("\r", "<br/>");
        newNote.WrittenBy = _employee;
        newNote.DateAdded = DateTime.Now;
        newNote.ExpenseId = expenseId;

        Console.WriteLine($"{newNote.NoteText}, {newNote.WrittenBy}");
        context.Notes.Add(newNote);
        await context.SaveChangesAsync();
        newNote = new Note(); // Reset the note

        _expenseViewModel.sectionVisibility["NoteModal"] = false; // Close the modal
    }

    private async Task AddApproval()
    {
        Employee approver = await context.Employees.FirstOrDefaultAsync(e => e.Id == selectedEmployeeId);

        if (approver is null)
        {
            return;
        }

        bool isDuplicate = context.Approvals.Any(a => a.Approver.Id == approver.Id && a.ExpenseId == Expense.Id);
        if (isDuplicate)
        {
            return;
        }

        var approval = new Approval
            {
                Approver = approver,
                LastUpdated = DateTime.Now,
                IsApproved = false,
                ExpenseId = Expense.Id
            };

        context.Approvals.Add(approval);
        await context.SaveChangesAsync();
    }

    private void FilterEmployees(ChangeEventArgs e)
    {
        employeeSearchTerm = e.Value.ToString();
        filteredEmployees = employees
            .Where(emp => emp.FullName.Contains(employeeSearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;

        // Save to Database. Get Filename
        int imageDbID = SaveFilenameRecordToDatabase(file);
        string filename = $"{imageDbID.ToString()}-{file.Name}";

        var uploadsFolder = Path.Combine(WebHostEnvironment.ContentRootPath, "SecureUploads");
        Directory.CreateDirectory(uploadsFolder);
        var filePath = Path.Combine(uploadsFolder, filename);

        await using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fileStream);
    }

    private int SaveFilenameRecordToDatabase(IBrowserFile file)
    {
        // Get the file extension
        string fileExtension = Path.GetExtension(file.Name);
        FileType fileType = GetFileType(fileExtension);

        // Save the image record to the database
        var image = new Image
            {
                FileName = file.Name,
                UploadTime = DateTime.Now,
                UploadedBy = _employee,
                ExpenseId = Expense.Id,
                FileType = fileType,
            };

        context.Images.Add(image);
        context.SaveChanges();   // Save the filename to the database
        RefreshAttachmentsList();
        return image.Id;
    }

    // Returns FileType or default to 'Other'
    private FileType GetFileType(string fileExtension)
    {
        FileType fileType = context.FileTypes.FirstOrDefault(ft => ft.Extension == fileExtension);

        if (fileType is null)
        {
            fileType = context.FileTypes.FirstOrDefault(ft => ft.Id == -1); // Default to 'Other'
        }

        return fileType;
    }

    private async Task DownloadFile(int imageId)
    {
        var image = await context.Images
            .Where(img => img.Id == imageId)
            .FirstOrDefaultAsync();

        string fileName = $"{image.Id}-{image.FileName}";
        Console.WriteLine(fileName);

        var filePath = Path.Combine(WebHostEnvironment.ContentRootPath, "SecureUploads", fileName);

        var fileBytes = await File.ReadAllBytesAsync(filePath);

        var base64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("openFileFromBase64", fileName, base64);
    }

    private async Task RefreshAttachmentsList()
    {
        _images = await context.Images
                    .Where(img => img.ExpenseId == Expense.Id)
                    .ToListAsync();
    }

    private async Task SubmitForm()
    {
        await UpdateExpense();
    }

    private void SaveAndRefreshPage()
    {
        UpdateExpense();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void SaveAndReturnToList()
    {
        UpdateExpense();
        NavigationManager.NavigateTo("/expenses");
    }

    private void DeleteApprover(int approvalId)
    {
        selectedApprovalForDeletion = approvalId;
    }

    private async Task ConfirmDeleteApproval()
    {
        var approval = await context.Approvals.FindAsync(selectedApprovalForDeletion);
        if (approval != null)
        {
            context.Approvals.Remove(approval);
            await context.SaveChangesAsync();
        }

        // Hide the modal
        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getInstance", "#deleteApprovalModal");
        await modal.InvokeVoidAsync("hide");
    }

    private void DeleteAttachment(int imageId)
    {
        selectedAttachmentForDeletion = imageId;
    }

    private async Task ConfirmDeleteAttachment()
    {

        var image = context.Images.Find(selectedAttachmentForDeletion);
        string fileName = $"{image.Id}-{image.FileName}";

        if (image != null)
        {
            context.Images.Remove(image);
            context.SaveChanges();
        }

        // Delete the file from the directory.
        File.Delete(Path.Combine(WebHostEnvironment.ContentRootPath, "SecureUploads", fileName));

        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getInstance", "#deleteAttachmentModal");
        await modal.InvokeVoidAsync("hide");

        RefreshAttachmentsList();
        StateHasChanged();
    }

    private async Task OnDepartmentChanged(ExpenseDetail expensedetail)
    {       
        context.Update(expensedetail);
        await context.SaveChangesAsync();
    }
}
