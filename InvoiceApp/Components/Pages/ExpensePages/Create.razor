@page "/expenses/create"
@using Microsoft.EntityFrameworkCore
@using InvoiceApp.Models
@using InvoiceApp.ViewModels
@using InvoiceApp.Data
@inject IDbContextFactory<InvoiceApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Expense</h2>
<hr />

<button @onclick='() => _expenseViewModel.ToggleSection("ExpenseSummary")' class="btn btn-secondary">Toggle Expense Summary</button>
<p>@_expenseViewModel.sectionVisibility["ExpenseSummary"]</p>

@if(_expenseViewModel.sectionVisibility["ExpenseSummary"]){
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Expense" OnValidSubmit="AddExpense" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="totalamount" class="form-label">TotalAmount:</label> 
                    <InputNumber id="totalamount" @bind-Value="Expense.TotalAmount" class="form-control" /> 
                    <ValidationMessage For="() => Expense.TotalAmount" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="totalhst" class="form-label">TotalHst:</label> 
                    <InputNumber id="totalhst" @bind-Value="Expense.TotalHst" class="form-control" /> 
                    <ValidationMessage For="() => Expense.TotalHst" class="text-danger" /> 
                </div>
                <div class="mb-3">
                    <label for="totalhst" class="form-label">Vendor:</label>
                    <InputText id="totalhst" @bind-Value="Expense.Vendor" class="form-control" />
                    <ValidationMessage For="() => Expense.Vendor" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}



<div>
    <a href="/expenses">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Expense Expense { get; set; } = new();
    private Note newNote = new Note();

    private Employee? _employee { get; set; }
    private ExpenseViewModel _expenseViewModel;
    private ApplicationDbContext context;


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        _expenseViewModel = new ExpenseViewModel(context);

        Expense.Vendor = "<<No Vendor Added>>";         // Default value
        _employee = await context.Employees.FirstOrDefaultAsync(e => e.Id == 2);
        if (_employee != null)
        {
            Expense.SubmittedBy = _employee;
        }

        ExpenseStatus expenseStatus = await context.ExpenseStatus.FirstOrDefaultAsync(ex => ex.Id == 2);
        Expense.ExpenseStatus = expenseStatus;

    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    // private async Task AddExpense()
    // {
    //     using var context = DbFactory.CreateDbContext();

    //     Expense.Vendor = "Some Vendor";
    //     Expense.SubmittedBy = context.Employees.FirstOrDefault(e => e.Id == 1);
    //     Expense.ExpenseStatus = context.ExpenseStatus.FirstOrDefault(es => es.Id ==1);

    //     context.Expenses.Add(Expense);
    //     await context.SaveChangesAsync();
    //     NavigationManager.NavigateTo("/expenses");
    // }

    private async Task AddExpense() {
        Expense newExpense = _expenseViewModel.CreateExpense(Expense);
        int newExpenseId = _expenseViewModel.AddExpense(newExpense);
        NavigationManager.NavigateTo($"/expenses/edit?id={newExpenseId}");
    }

    private async Task AddNote()
    {
        int expenseId = context.Expenses.OrderBy(e => e.Id).Last().Id;

        newNote.WrittenBy = _employee;
        newNote.DateAdded = DateTime.Now;
        newNote.ExpenseId = expenseId;


        Console.WriteLine($"{newNote.NoteText}, {newNote.WrittenBy}");
        context.Notes.Add(newNote);
        await context.SaveChangesAsync();
        newNote = new Note(); // Reset the note
    }
}
