@inherits LayoutComponentBase
@using InvoiceApp.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InvoiceApp.Services.UserService UserService
@inject NavigationManager NavigationManager


<div class="page">

    @* <div class="sidebar"> *@
    @*     <NavMenu /> *@
    @* </div> *@

    <main>
        <div class="row" style="background-color: rgb(5, 39, 103);height:50px;color:white;">
            <div class="col-md-6 d-flex justify-content-start align-items-center" >

                <span style="font-size:1.5em;"><i class="bi bi-heptagon-fill" style="color:rgb(204, 153, 51);margin-left:25px;margin-right:10px;"></i>Invoice Flow Professional</span>

            </div>
            <div class="col-md-6 d-flex justify-content-end align-items-center pr-30">


                 @if (currentUser != null) 
                 { 
                     <span style="margin-right:30px">@currentUser.UserName</span> 
                 } 
                 else 
                 {
                    <span style="margin-right:30px">No Current User</span>
                } 
             </div>
        </div>
        <div class="row full-height" style="display: flex;">
            <div style="width: auto;height:auto;">
                <NavMenu />
            </div>
            <div style="flex: 1;">
                <article class="content px-4">
                    @Body
                </article>
            </div>
        </div>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private string? userName;
    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadCurrentUserAsync();
    }

    private async Task LoadCurrentUserAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/", StringComparison.OrdinalIgnoreCase))
        {
            await LoadCurrentUserAsync();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }



}
