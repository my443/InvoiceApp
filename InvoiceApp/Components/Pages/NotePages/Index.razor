@page "/notes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using InvoiceApp.Models
@using InvoiceApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<InvoiceApp.Data.ApplicationDbContext> DbFactory
@inject InvoiceApp.Services.UserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>
@if (currentUser != null)
{
    <p>@currentUser.UserName</p>
    <button @onclick="Logout">Logout</button>
}
else
{
    <p>No Current User</p>
}
<p>
    <a href="notes/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Notes">
    <PropertyColumn Property="note => note.NoteText" />
    <PropertyColumn Property="note => note.DateAdded" />

    <TemplateColumn Context="note">
        <a href="@($"notes/edit?id={note.Id}")">Edit</a> |
        <a href="@($"notes/details?id={note.Id}")">Details</a> |
        <a href="@($"notes/delete?id={note.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        currentUser = await UserService.GetCurrentUserAsync();
    }

    private async Task Logout()
    {
        Navigation.NavigateTo("/logout"); // Redirect to home or login page
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
